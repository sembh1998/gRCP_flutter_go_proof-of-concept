// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: establishment.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EstablishmentServiceClient is the client API for EstablishmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstablishmentServiceClient interface {
	GetEstablishmentsPerStore(ctx context.Context, in *EstablishmentsByStoreIdRequest, opts ...grpc.CallOption) (*EstablishmentsResponse, error)
	GetEstablishmentById(ctx context.Context, in *EstablishmentByIdRequest, opts ...grpc.CallOption) (*EstablishmentResponse, error)
}

type establishmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEstablishmentServiceClient(cc grpc.ClientConnInterface) EstablishmentServiceClient {
	return &establishmentServiceClient{cc}
}

func (c *establishmentServiceClient) GetEstablishmentsPerStore(ctx context.Context, in *EstablishmentsByStoreIdRequest, opts ...grpc.CallOption) (*EstablishmentsResponse, error) {
	out := new(EstablishmentsResponse)
	err := c.cc.Invoke(ctx, "/EstablishmentService/getEstablishmentsPerStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *establishmentServiceClient) GetEstablishmentById(ctx context.Context, in *EstablishmentByIdRequest, opts ...grpc.CallOption) (*EstablishmentResponse, error) {
	out := new(EstablishmentResponse)
	err := c.cc.Invoke(ctx, "/EstablishmentService/getEstablishmentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstablishmentServiceServer is the server API for EstablishmentService service.
// All implementations must embed UnimplementedEstablishmentServiceServer
// for forward compatibility
type EstablishmentServiceServer interface {
	GetEstablishmentsPerStore(context.Context, *EstablishmentsByStoreIdRequest) (*EstablishmentsResponse, error)
	GetEstablishmentById(context.Context, *EstablishmentByIdRequest) (*EstablishmentResponse, error)
	mustEmbedUnimplementedEstablishmentServiceServer()
}

// UnimplementedEstablishmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEstablishmentServiceServer struct {
}

func (UnimplementedEstablishmentServiceServer) GetEstablishmentsPerStore(context.Context, *EstablishmentsByStoreIdRequest) (*EstablishmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstablishmentsPerStore not implemented")
}
func (UnimplementedEstablishmentServiceServer) GetEstablishmentById(context.Context, *EstablishmentByIdRequest) (*EstablishmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstablishmentById not implemented")
}
func (UnimplementedEstablishmentServiceServer) mustEmbedUnimplementedEstablishmentServiceServer() {}

// UnsafeEstablishmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstablishmentServiceServer will
// result in compilation errors.
type UnsafeEstablishmentServiceServer interface {
	mustEmbedUnimplementedEstablishmentServiceServer()
}

func RegisterEstablishmentServiceServer(s grpc.ServiceRegistrar, srv EstablishmentServiceServer) {
	s.RegisterService(&EstablishmentService_ServiceDesc, srv)
}

func _EstablishmentService_GetEstablishmentsPerStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstablishmentsByStoreIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).GetEstablishmentsPerStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EstablishmentService/getEstablishmentsPerStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).GetEstablishmentsPerStore(ctx, req.(*EstablishmentsByStoreIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EstablishmentService_GetEstablishmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstablishmentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstablishmentServiceServer).GetEstablishmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EstablishmentService/getEstablishmentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstablishmentServiceServer).GetEstablishmentById(ctx, req.(*EstablishmentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EstablishmentService_ServiceDesc is the grpc.ServiceDesc for EstablishmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EstablishmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EstablishmentService",
	HandlerType: (*EstablishmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getEstablishmentsPerStore",
			Handler:    _EstablishmentService_GetEstablishmentsPerStore_Handler,
		},
		{
			MethodName: "getEstablishmentById",
			Handler:    _EstablishmentService_GetEstablishmentById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "establishment.proto",
}
